[
  {
    "objectID": "ho/ho1_2.html",
    "href": "ho/ho1_2.html",
    "title": "Choropleth Mapping",
    "section": "",
    "text": "This post explores the functions in R to plot choropleth maps."
  },
  {
    "objectID": "ho/ho1_2.html#loading-r-packages",
    "href": "ho/ho1_2.html#loading-r-packages",
    "title": "Choropleth Mapping",
    "section": "1.1 Loading R Packages",
    "text": "1.1 Loading R Packages\nThe following are the packages required for the hands-on exercise :\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\np_load( ) - pacman - to load packages into R environment. This function will attempt to install the package from CRAN or the pacman repository list if it is not installed.\n\n\n\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "ho/ho1_2.html#data-importation",
    "href": "ho/ho1_2.html#data-importation",
    "title": "Choropleth Mapping",
    "section": "1.2 Data Importation",
    "text": "1.2 Data Importation\n\n1.2.1 Import Geospatial Data\nImport Singapore Urban Redevelopment Authority(URA) Master Plan 2014 Subzone Boundary from data.gov.sg into mpsz simple feature data frame -\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nst_read( ) - sf- to read the shapefile into simple features data frame format with 2 arguments below :\n\ndsn - define data path.\nlayer - provide shapefile name.\n\n\n\n\n\nmpsz = st_read(dsn = \"data/geospatial\",                \n               layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `D:\\jephOstan\\geospatial_jtz\\ho\\data\\geospatial' using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\n\n\n1.2.2 Import Aspatial Data\nImport Singapore Urban Redevelopment Authority(URA) Master Plan 2014 Subzone Boundary from data.gov.sg into mpsz simple feature data frame -\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nread_csv( ) - readr - to read a CSV file.\n\n\n\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")"
  },
  {
    "objectID": "ho/ho1_2.html#data-inspection",
    "href": "ho/ho1_2.html#data-inspection",
    "title": "Choropleth Mapping",
    "section": "1.3 Data Inspection",
    "text": "1.3 Data Inspection\n\n1.3.1 Retrieve Information\n\nglimpse(popdata,60)\n\nRows: 984,656\nColumns: 7\n$ PA   &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"An…\n$ SZ   &lt;chr&gt; \"Ang Mo Kio Town Centre\", \"Ang Mo Kio Town Ce…\n$ AG   &lt;chr&gt; \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to_4\", \"0_to…\n$ Sex  &lt;chr&gt; \"Males\", \"Males\", \"Males\", \"Males\", \"Males\", …\n$ TOD  &lt;chr&gt; \"HDB 1- and 2-Room Flats\", \"HDB 3-Room Flats\"…\n$ Pop  &lt;dbl&gt; 0, 10, 30, 50, 0, 0, 40, 0, 0, 10, 30, 60, 0,…\n$ Time &lt;dbl&gt; 2011, 2011, 2011, 2011, 2011, 2011, 2011, 201…"
  },
  {
    "objectID": "ho/ho1_2.html#data-wrangling",
    "href": "ho/ho1_2.html#data-wrangling",
    "title": "Choropleth Mapping",
    "section": "2.1 Data Wrangling",
    "text": "2.1 Data Wrangling\nFollowing are the additional variables will be needed for later choropleth plotting -\n\nYOUNG : age group 0 to 4 until age group 20 to 24.\nECONOMY ACTIVE : age group 25 - 29 until age group 60 - 64.\nAGED : age group 65 and above.\nTOTAL : all age groups.\nDEPENDENCY : the ratio between young & aged against the economy active group.\n\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\npivot_wider( ) - tidyr - to create new columns with column name based on AG & values based on pop.\nmutate( ) - dplyr - to create new columns as mentioned above.\nfilter( ) - dplyr - to keep only 2020 for Time attribute.\ngroup_ by( ) - dplyr - to group 3 variables - PA, SZ and AG.\nselect( ) - dplyr - to keep only variables that mentioned.\n\n\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from = AG, values_from = POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6]) + rowSums(.[12])) %&gt;%\n  mutate(`ECONOMY ACTIVE` = rowSums(.[7:11]) + rowSums(.[13:15])) %&gt;% \n  mutate(`AGED` = rowSums(.[16:21])) %&gt;%\n  mutate(`TOTAL` = rowSums(.[3:21])) %&gt;%\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`,`SZ`,`YOUNG`,`ECONOMY ACTIVE`,`AGED`,`TOTAL`,`DEPENDENCY`)"
  },
  {
    "objectID": "ho/ho1_2.html#merging-geospatial-aspatial-data",
    "href": "ho/ho1_2.html#merging-geospatial-aspatial-data",
    "title": "Choropleth Mapping",
    "section": "2.2 Merging Geospatial & Aspatial Data",
    "text": "2.2 Merging Geospatial & Aspatial Data\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nmutate_at( ) - dplyr - to modify specified columns PA and SZ in popdata2020.\n\n.fun argument to indicates the function, i.e. touper( ) applying on the specified columns. This function is to convert all text to uppercase in order to match the uppercase in the geospatial dataset.\n\nleft_join( ) - dplyr - to keep all observations in mpsz. This is an outer joins.\nwrite_rds( ) - readr - to serialise mpsz_pop2020. By default, no compression as space is cheaper than time.\n\n\n\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ),\n            .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\n\nwrite_rds(mpsz_pop2020, \"data/mpszpop2020.rds\")"
  },
  {
    "objectID": "ho/ho1_2.html#mapping-with-tmap",
    "href": "ho/ho1_2.html#mapping-with-tmap",
    "title": "Choropleth Mapping",
    "section": "3.1 Mapping with tmap",
    "text": "3.1 Mapping with tmap\n\n3.1.1 Plot with qtm( )\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\nqtm( ) - tmap - to plot a thematic map quickly. However, the aesthetic layers are\n\nfill - to specify which variable to be used for the choropleth. Set it NULL if just to draw the polygon borders.\n\n\n\n\n\nqtm(mpsz_pop2020,\n    fill = \"DEPENDENCY\")\n\n\n\n\n\nqtm(mpsz_pop2020,\n    fill = NULL)\n\n\n\n\n\n\n3.1.1 Plot Cartographic Furniture with tmap elements\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ntm_shape( ) - tmap - to specify shape object, which in this case is mpsz_pop2020. This is to set the bounding box for the plot.\ntm_fill( ) - tmap - to specify which column’s value to be used for filling the polygons.\n\nplotting options for style argument :\n\nEach unique value will be a distinct category - cat\nDiscrete gradient options - fixed, sd, equal, pretty, quantile, kmeans, hclust, bclust, fisher, jenks, dpih, headtails\nContinuous gradient options - cont, order & log10\nLog scale - log10_pretty\n\nWhen the style is fixed, breaks argument should be specified.\ncolour options for palette argument : if not sure which palette to use, can input this code chunk at the console for references - tmaptools::palette_explorer()\n\ntm_layout( ) - tmap - to specify title, margins, aspect ratio, frame, legend, etc..\n\nframe by default is TRUE.\nframe.lwd specify the width of the frame.\nasp - if the aspect ratio is set to ‘0’, the ratio will be adjusted to the aspect ratio of the device.\n\ntm_borders( ) - tmap - to define the line colour, width, type for polygons’ borders.\n\ncol to indicate line colour.\nlwd to specify the line width.\nlty to specify the line type such as blank, dashed, dotted, dotdash, longdash, twodash, solid\nalpha to indicate the transparency level. Value between 0 (transparent) and 1 (not transparent). By default is 1.\n\ntm_compass( ) - tmap - to create compass.\n\nOptions available for type are arrow, 4star, 8star, radar, rose. By default is arrow.\n\ntm_scale_bar( ) - tmap - to create scale bar.\n\ncolor.dark - by default is set to black.\ncolor.light - by default is set to white.\n\ntm_grid( ) - tmap - to draw graticule lines.\n\n\n\n\nStyle : quantilesdequalkmeanshclustfisherheadtails\n\n\nNOTE : The default colour scheme is YlOrRd, missing value will be in grey and default interval binning based on pretty.\n\ntmap_mode(\"plot\")\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame.lwd = 5,\n            asp = 0) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\nborder colour to white, number of classes, n to 10\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Test Elements\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame.lwd = 5,\n            asp = 0) +\n  tm_borders(alpha = 0.5, col = 'white') +\n  tm_compass(type = \"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n\n\n\n\n\nApart from style changed to sd, palette to OrRd, borders to dashed, compass to arrow, and additional arguments for scale_bar.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"sd\", \n          palette = \"OrRd\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Test Elements\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame.lwd = 5,\n            asp = 0) +\n  tm_borders(alpha = 0.5, lty = 'dashed') +\n  tm_compass(type = \"arrow\", size = 2) +\n  tm_scale_bar(color.dark = 'red', color.light = 'orange') +\n  tm_grid(alpha = 0.2)\n\n\n\n\n\n\nStyle to equal, palette to Greys, borders to dotted and compass to radar .\nNOTE : be careful between Greys and grey - the output is entirely different!!!\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"equal\", \n          palette = \"Greys\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Test Elements\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame.lwd = 5,\n            asp = 0) +\n  tm_borders(alpha = 0.5, lty = 'dotted') +\n  tm_compass(type = \"radar\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"equal\", \n          palette = \"grey\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Test Elements\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame.lwd = 5,\n            asp = 0) +\n  tm_borders(alpha = 0.5, lty = 'dotted') +\n  tm_compass(type = \"radar\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n\n\n\n\n\nStyle to kmeans , palette to YlOrRd, borders to longdash and compass to rose.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"kmeans\",\n          palette = \"YlOrRd\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Test Elements\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame.lwd = 5,\n            asp = 0) +\n  tm_borders(alpha = 0.5, lty = 'longdash') +\n  tm_compass(type = \"rose\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n\n\n\n\n\nStyle to hclust and border to blank, and test default without palette argument.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"hclust\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Test Elements\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame.lwd = 5,\n            asp = 0) +\n  tm_borders(alpha = 0.5, lty = 'blank') +\n  tm_compass(type = \"rose\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n\n\n\n\n\nStyle to fisher. The output same as jenks\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"fisher\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Test Elements\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame.lwd = 5,\n            asp = 0) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"rose\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n\n\n\n\n\nStyle to headtails.\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"headtails\",\n          title = \"Dependency ratio\") +\n  tm_layout(main.title = \"Test Elements\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame.lwd = 5,\n            asp = 0) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type = \"rose\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha = 0.2)\n\n\n\n\n\n\n\n\n\n3.1.2 Binning Customisation\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 19.0)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n3.1.3 Colour Reversion\nWhen the context requires to highlight smaller values, add a ‘-’ prefix.\n\nHighlight High ValuesLow Values\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n3.1.4 Additional Elements Map Layout\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n3.1.5 Map Style\nNote that element is not referring to the style argument under tm_fill.\n\nClassicGrayNaturalCobaltCol_blindAlbatrossBeaverBWWatercolor\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"gray\")\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"natural\")\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"cobalt\")\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"col_blind\")\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"albatross\")\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"beaver\")\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"bw\")\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"watercolor\")\n\n\n\n\n\n\n\nTo reset the default style -\n\ntmap_style(\"white\")\n\n\n\n3.2.1 Facet Choropleth Maps\nThere are 3 ways to plot -\n\nmultiple values to at least one of the asthetic arguments;\ndefine a group-by variable in tm_facets( );\ncreate multiple stand-alone maps with tmap_arrange( ).\n\n\n3.2.1.1 Multiple values in tm_fill( )\n\nPalette : Same ColourDifferent Colours\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n3.2.1.2 Withtm_facets( )\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ntm_facets( ) - tmap - to plot multiple small choropleth maps.\n\nfree.coords - works along with by argument. By default is TRUE, alphabetically?\ndrop.units - By default TRUE. When FALSE, they are plotted where mapped aesthetics are regarded as missing values.\n\n\n\n\n\nDROP.UNITS : TRUEFALSE\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by = \"REGION_N\", \n            free.coords = TRUE, \n            drop.units = TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by = \"REGION_N\", \n            free.coords = TRUE, \n            drop.units = FALSE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n3.2.1.3 Withtmap_arrange( )\n\n\n\n\n\n\n⇳ Usage of the code chunk below :\n\n\n\n\n\ntmap_arrange( ) - tmap - to arrange multiple stand-alone maps in grid layout.\n\nsync - navigation in view mode (zooming and panning) be synchronised. By default is FALSE.\n\n\n\n\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              n = 4,\n              style = \"quantile\", \n              palette = \"Blues\") +\n  tm_layout(legend.height = 0.42, \n            legend.width = 0.38,\n            frame.lwd = 3)\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\",\n              n = 4,\n              style = \"quantile\", \n              palette = \"Blues\") +\n  tm_layout(legend.height = 0.42, \n            legend.width = 0.38,\n            frame.lwd = 3)\n\neconactmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"ECONOMY ACTIVE\",\n              n = 4,\n              style = \"quantile\", \n              palette = \"Blues\") +\n  tm_layout(legend.height = 0.42, \n            legend.width = 0.38,\n            frame.lwd = 3)\n\ntmap_arrange(youngmap, agedmap, econactmap, \n             heights = 1, widths = 1, asp = 2, ncol = 2, nrow = 2, sync = TRUE)\n\n\n\n\n\n\n\n3.2.2 Mapping specific Spatial Object\nNOTE : When tmap_mode set to view, the histogram will not be able to display correctly. So this function cannot be used along with legend.hist.\n\nNON-INTERACTIVEINTERACTIVE\n\n\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N == \"CENTRAL REGION\",]) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\", \n          palette = \"-Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.8, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5, col = 'white')\n\n\n\n\n\n\n\ntmap_mode(\"view\")\ntmap_options(check.and.fix = TRUE)\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N == \"CENTRAL REGION\",]) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\", \n          palette = \"-Blues\") +\n  tm_view(set.zoom.limits = c(12, 15)) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.6, \n            legend.width = 5.0) +\n  tm_borders(alpha = 0.68, col = 'white')"
  }
]