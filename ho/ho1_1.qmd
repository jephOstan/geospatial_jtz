---
title: "Data Wrangling with R"
subtitle: "Geospatial Data"
editor: visual
date: 25 Nov 2023
date-modified: "`r Sys.Date()`"
code-copy: true
execute: 
  echo: true
  eval: true
  warning: false
  error: false
website: 
    google-analytics: "G-SGM5SNE7BQ"
format:
  html:
    code-overflow: wrap
    code-fold: false
    code-summary: "Show the code"
    css: styles.css
---

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**CREDIT**]{style="color:#3a9c88"}

Once again, the credit for the code chunks and the key content of this post to [Dr. Kam Tin Seong](https://faculty.smu.edu.sg/profile/kam-tin-seong-486 "Geospatial Analytics Lecturer"), my geospatial analytics lecturer at the School of Computing and Information Systems, Singapore Management University. He has helped me tremendously, from having zero knowledge and programming background to comfortably using R for geospatial analysis.

Also, credits for some examples and explanation to Uriel, my ChatGPT ( OpenAI ) buddy, named him after the Archangel of Wisdom :).
:::

This post covers the basic wrangling technique for geospatial data such as -

-   Transformation of coordinate systems;

-   Conversion of aspatial data into a sf data frame;

-   Exploratory Data Analysis (EDA) with ggplot2 package.

<br>

# **1. INITIALISATION**

## **1.1 Loading R Packages**

The following are the packages required for the hands-on exercise :

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***p_load( )*** - pacman -]{style="color:#d46e15"} to load packages into R environment. This function will attempt to install the package from CRAN or the pacman repository list if it is not installed.
:::

```{r}
pacman::p_load(sf, tidyverse)
```

<br>

## **1.2 Data Importation**

### 1.2.1 Import Geospatial Data

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_read( )*** - sf-]{style="color:#d46e15"} to read the shapefile into simple features data frame format with 2 arguments below :

-   **dsn** - define data path.

-   **layer** - provide shapefile name.
:::

#### 1.2.1.1 Polygon feature data in shapefile format

Import **Singapore Master Plan 2014 Subzone Boundary** from [data.gov.sg](#0) into **`mpsz`** simple feature data frame -

```{r}
mpsz = st_read(dsn = "data/geospatial",
               layer = "MP14_SUBZONE_WEB_PL")
```

Metrics used in the output above -

-   **Geometry type** : Refers to the type of shapes represented in the spatial data.

-   **Dimension :** "XY" means that the geometries are defined in a two-dimensional space with an X (longitude) and a Y (latitude) coordinate.

-   **Bounding Box** : The bounding box represents the extent of the spatial dataset, defined by the minimum and maximum coordinates in each dimension.

    -   "xmin", "ymin", "xmax", and "ymax" represent the minimum longitude, minimum latitude, maximum longitude, and maximum latitude, respectively.

-   **Projected CRS** : Coordinate Reference System (CRS) is a system that uses one or more numbers or coordinates to determine the position of a point or a geometric element uniquely.

-   **`SVY21`** is a specific type of CRS, which stands for the **Singapore Transverse Mercator projection**, used for creating maps and conducting land surveys in Singapore.

#### 1.2.1.2 Polyline feature data in shapefile format

Import cycling path from [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en.html).

```{r}
cyclingPath = st_read(dsn = "data/geospatial",
                      layer = "CyclingPath")
```

#### 1.2.1.3 GIS data in kml format

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")
```

Unlike **`SVY21`** for other dataset, this preschool dataset is **`WGS 84`** - which stands for **World Geodetic System 1984** - a global reference coordinate system used by the Global Positioning System (GPS).

### 1.2.2 Import Aspatial Data

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***read_csv( )*** - readr -]{style="color:#d46e15"} to read a CSV file.
:::

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

<br>

## **1.3 Data Inspection**

### 1.3.1 Retrieve Information

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_geometry( )*** - sf-]{style="color:#d46e15"} to get geometry information from an `sf` object.
:::

```{r}
st_geometry(mpsz)
```

With "mpsz\$geom" or specifically indiate the position of the geometry column, "mpsz\[\[1\]\]" can also produced the same output as shown above.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***glimpse( )*** - dplyr-]{style="color:#d46e15"} to reveals the data type of each feature / variable. Specify an integer behind to reveal the amount of information to be displayed.

-   `dbl` shorts for "Double-precision" value.
:::

```{r}
glimpse(mpsz,60)
```

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***head( )*** - utils -]{style="color:#d46e15"} to return the top n features of *`mpsz`*. If n is not specified, top 6 (default) features will be displayed instead. Directly specified the integer works as well.
:::

```{r}
head(mpsz, n = 2)
```

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***list( )*** - base -]{style="color:#d46e15"} to create a tibble data frame that contain all different types of variables in `<listings>`.
:::

```{r}
list(listings)
```

From the output above, latitude and longitude are in decimal degree format, which best assumes it's in **`wgs84`** Geographic Coordinate System.

<br>

## **1.4 Data Visualisation**

### 1.4.1 Retrieve Information

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***plot( )*** - graphics -]{style="color:#d46e15"} to visualise geospatial features.
:::

```{r}
#| fig-width: 14
#| fig-asp: 0.68
plot(mpsz)
```

Plot only the boundaries - combine both `plot( )` together with `st_geometry( )` to specifically get the geometry details for `plot( )` to plot.

```{r}
plot(st_geometry(mpsz))
```

or, specifically indicate which attribute / variable to plot.

```{r}
plot(mpsz["PLN_AREA_N"])
```

<br>

# **2. DATA PROCESSING**

## **2.1 Projection Transformation**

### 2.1.1 Inspect & Edit the EPSG Code

2 common issues encountered when importing geospatial data -

-   Shapefile with missing .proj file.

-   The projected CRS is wrongly assigned.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_crs( )*** - sf -]{style="color:#d46e15"} to retrieve coordinate reference system for mpsz.
:::

```{r}
st_crs(mpsz)
```

The EPSG code for "svy21" should be 3414, not 9001 as shown above.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_set_crs( )*** - sf -]{style="color:#d46e15"} to replace the coordinate reference system for mpsz.
:::

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

### 2.1.2 Transform Geographic Coordinate System to Projected CRS

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_transform( )*** - sf -]{style="color:#d46e15"} to reproject x from one coordinate system wgs84 to svy21 mathematically, which is not capable by *st_set_crs( )*.
:::

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

<br>

## **2.2 Aspatial Data Frame Transformation**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_as_sf( )*** - sf -]{style="color:#d46e15"} to convert aspatial object, i.e., *`listings`* to an sf object.

-   *coords* - provide x-coordinates first before y-coordinates.

-   *crs* - define the coordinates reference system with `EPSG : 4326` ( **`wgs84`** Geographic Coordinate System)

-   *%\>%* - to nest `st_transform( )` to transform the newly created simple feature data frame into `EPSG : 3414` which is Singapore's `SVY21` projected CRS.
:::

```{r}
listings_sf <- st_as_sf(listings,
                        coords = c("longitude", "latitude"),
                        crs = 4326) %>%
  st_transform(crs = 3414)
```

```{r}
glimpse(listings_sf, 70)
```

A new column, `geometry` is introduced while `longitude` & `latitude` are dropped from the data frame.

<br>

# **3. GEOSPATIAL ANALYSIS**

## 3.1 Buffering

[Buffering](https://www.geographyrealm.com/buffers-in-gis/) is a GIS technique to define an area bidirectional or setback of distance or width from a geographic feature (point, line or polygon).

Below are some of use cases for this GIS technique -

1.  **Ecological Studies**: Determining impact zones around protected wildlife areas to analyse potential effects of human activities on habitats.

2.  **Urban Planning**: Establishing zones around public facilities like schools or hospitals to evaluate accessibility for nearby residents.

3.  **Transportation Engineering**: Assessing areas within a certain radius of public transit lines to optimise service coverage and planning.

4.  **Emergency Preparedness**: Creating zones around industrial plants to simulate the extent of potential chemical spills for evacuation planning.

5.  **Market Analysis**: Defining catchment areas around retail stores to understand the demographic profile of potential customers living within a specific distance.

6.  **Environmental Protection**: Designating buffer zones around rivers or lakes to protect water quality from adjacent land-use activities.

7.  **Risk Assessment**: Evaluating flood risk by creating buffers along waterways that might overflow, affecting adjacent areas.

8.  **Agricultural Management**: Determining pesticide-free zones around crop fields by buffering from schools or residential areas.

9.  **Public Safety**: Analysing crime incidence by creating buffers around areas of interest, such as nightlife districts, to allocate police resources effectively.

10. **Telecommunications**: Planning network infrastructure by buffering around existing cell towers to identify areas with weak signal coverage for improvement.

### 3.1.1 Create buffer distance

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_buffer( )*** - sf -]{style="color:#d46e15"} to set geometric unary operation.

-   dist - to set 5 metre buffer distance for *`cyclingpath`*.

-   nQuadSegs - to set number of segments per quadrant.
:::

```{r}
buffer_cycling <- st_buffer(cyclingPath, 
                            dist = 5, 
                            nQuadSegs = 30)
```

### 3.1.2 Calculate buffer / area

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_area( )*** - sf -]{style="color:#d46e15"} to compute the buffered area in *`buffer_cycling`* . The area is introduced under a new attribute `area`.

note - if st_area on *`cyclingPath`* will have 0 m^2^ for area.
:::

```{r}
buffer_cycling$area <- st_area(buffer_cycling)
```

```{r}
sum(buffer_cycling$area)
```

## 3.2 Point-in-Polygon (PIP) Count

This GIS technique is used to determine how many point features (such as locations of schools, hospitals, or crime incidents) fall within polygon features (like municipal boundaries, neighborhoods, or zones).

This technique is very useful for understanding the distribution and concentration of features across a geographic area and can inform policy decisions, resource allocation, or identify trends and patterns in spatial data.

### 3.2.1 Intersection & calculate

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_intersects( )*** - sf -]{style="color:#d46e15"} to identify pre-schools located inside each Planning Subzone.

[***length( )*** - base -]{style="color:#d46e15"} to aggregate and count the intersection points within each Planning Subzone.
:::

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

```{r}
summary(mpsz3414$`PreSch Count`)
```

### 3.2.2 Sort listing

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***top_n( x , n, wt)*** - dplyr -]{style="color:#d46e15"} to list the Planning Subzone with the most pre-schools.

-   x - a data frame, in this case, *`mpsz3414`*

-   n - number of rows returned.

-   wt - the variable for the sorting. If not specified, the last column will be used by default.
:::

```{r}
top_n(mpsz3414, 3, `PreSch Count`)
```

### 3.2.3 Compute density

First step is to derive the area of each Planning Subzone under `mpsz3414`.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Second step is to compute the density with the `mutate` function.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count` / Area * 1000000)
```

# 4. EXPLORATORY DATA ANALYSIS (EDA)

## 4.1 Histogram

For quick assessment or non-publication usage -

```{r}
#| fig-width: 8
#| fig-asp: 0.68

hist(mpsz3414$`PreSch Density`)
```

For a more fine-tuned / customised histogram -

```{r}
#| fig-width: 8
#| fig-asp: 0.68

ggplot(data = mpsz3414, 
       aes(x = as.numeric(`PreSch Density`))) +
  geom_histogram(bins = 20, 
                 color = "white", 
                 fill = "salmon") +
  labs(title = "DISTRIBUTION OF PRE-SCHOOL DENSITY ACROSS SGP PLANNING SUBZONES",
       subtitle = "The histogram illustrates a right-skewed distribution of pre-school density per square kilometre across Planning Subzones. \nThe tail of the distribution extends to the right, indicating outliers or exceptional Subzones \nwith preschool densities considerably above the norm.",
       x = "Pre-school Density (per km sq)",
       y = "Frequency") +
  theme(plot.title = element_text (size = 14, 
                                   colour = "#302f2f",
                                   face = "bold"),
        plot.subtitle = element_text(size = 9.5,
                                     colour = "#424242",
                                     face = "italic"))
  
```

## 4.2 Scatterplot

Show relationship between `Pre-school Density` and `Pre-school Count`.

```{r}
#| fig-width: 8
#| fig-asp: 0.68
ggplot(data = mpsz3414, 
       aes(y = `PreSch Count`, 
           x = as.numeric(`PreSch Density`))) +
  geom_point(color = "black", 
             fill = "salmon") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "SPATIAL DISTRIBUTION OF SINGAPORE PRE-SCHOOL FACILITIES",
       subtitle = "Correlation Between Pre-School Count and Density per Square Kilometer Across Subzones",
       x = "Pre-school density (per km sq)",
       y = "Pre-school count") +
  theme(plot.title = element_text (size = 14, 
                                   colour = "#302f2f",
                                   face = "bold"),
        plot.subtitle = element_text(size = 11,
                                     colour = "#424242",
                                     face = "italic"))
```
