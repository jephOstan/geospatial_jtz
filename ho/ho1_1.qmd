---
title: "Data Wrangling with R"
subtitle: "Geospatial Data"
editor: visual
date: 25 Nov 2023
date-modified: "`r Sys.Date()`"
code-copy: true
execute: 
  echo: true
  eval: true
  warning: false
  error: false
website: 
    google-analytics: "G-SGM5SNE7BQ"
format:
  html:
    code-overflow: wrap
    code-fold: false
    code-summary: "Show the code"
    css: styles.css
---

This post covers the basic wrangling technique for geospatial data such as -

-   Transformation of coordinate systems;

-   Conversion of aspatial data into a sf data frame;

-   Exploratory Data Analysis (EDA) with ggplot2 package.

<br>

# **1. INITIALISATION**

## **1.1 Loading R Packages**

The following are the packages required for the hands-on exercise :

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***p_load( )*** - pacman -]{style="color:#d46e15"} to load packages into R environment. This function will attempt to install the package from CRAN or the pacman repository list if it is not installed.
:::

```{r}
pacman::p_load(sf, tidyverse)
```

<br>

## **1.2 Data Importation**

### 1.2.1 Import Geospatial Data

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_read( )*** - sf-]{style="color:#d46e15"} to read the shapefile into simple features data frame format with 2 arguments below :

-   **dsn** - define data path.

-   **layer** - provide shapefile name.
:::

#### 1.2.1.1 Polygon feature data in shapefile format

Import **Singapore Master Plan 2014 Subzone Boundary** from [data.gov.sg](#0) into **`mpsz`** simple feature data frame -

```{r}
mpsz = st_read(dsn = "data/geospatial",
               layer = "MP14_SUBZONE_WEB_PL")
```

Metrics used in the output above -

-   **Geometry type** : Refers to the type of shapes represented in the spatial data.

-   **Dimension :** "XY" means that the geometries are defined in a two-dimensional space with an X (longitude) and a Y (latitude) coordinate.

-   **Bounding Box** : The bounding box represents the extent of the spatial dataset, defined by the minimum and maximum coordinates in each dimension.

    -   "xmin", "ymin", "xmax", and "ymax" represent the minimum longitude, minimum latitude, maximum longitude, and maximum latitude, respectively.

-   **Projected CRS** : Coordinate Reference System (CRS) is a system that uses one or more numbers or coordinates to determine the position of a point or a geometric element uniquely.

-   **`SVY21`** is a specific type of CRS, which stands for the **Singapore Transverse Mercator projection**, used for creating maps and conducting land surveys in Singapore.

#### 1.2.1.2 Polyline feature data in shapefile format

Import cycling path from [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en.html)

```{r}
cyclingPath = st_read(dsn = "data/geospatial",
                      layer = "CyclingPath")
```

#### 1.2.1.3 GIS data in kml format

```{r}
preschool = st_read("data/geospatial/pre-schools-location-kml.kml")
```

Unlike **`SVY21`** for other dataset, this preschool dataset is **`WGS 84`** - which stands for **World Geodetic System 1984** - a global reference coordinate system used by the Global Positioning System (GPS).

### 1.2.2 Import Aspatial Data

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***read_csv( )*** - readr -]{style="color:#d46e15"} to read a CSV file.
:::

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

<br>

## **1.3 Data Inspection**

### 1.3.1 Retrieve Information

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_geometry( )*** - sf-]{style="color:#d46e15"} to get geometry information from an `sf` object.
:::

```{r}
st_geometry(mpsz)
```

With "mpsz\$geom" or specifically indiate the position of the geometry column, "mpsz\[\[1\]\]" can also produced the same output as shown above.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***glimpse( )*** - dplyr-]{style="color:#d46e15"} to reveals the data type of each feature / variable. Specify an integer behind to reveal the amount of information to be displayed.

-   `dbl` shorts for "Double-precision" value.
:::

```{r}
glimpse(mpsz,60)
```

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***head( )*** - utils -]{style="color:#d46e15"} to return the top n features of *`mpsz`*. If n is not specified, top 6 (default) features will be displayed instead. Directly specified the integer works as well.
:::

```{r}
head(mpsz, n = 2)
```

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***list( )*** - base -]{style="color:#d46e15"} to create a tibble data frame that contain all different types of variables in `<listings>`.
:::

```{r}
list(listings)
```

From the output above, latitude and longitude are in decimal degree format, which best assumes it's in **`wgs84`** Geographic Coordinate System.

<br>

## **1.4 Data Visualisation**

### 1.4.1 Retrieve Information

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***plot( )*** - ?? -]{style="color:#d46e15"} to visualise geospatial features.
:::

```{r}
plot(mpsz)
```

Plot only the boundaries - combine both `plot( )` together with `st_geometry( )` to specifically get the geometry details for `plot( )` to plot.

```{r}
plot(st_geometry(mpsz))
```

or, specifically indicate which attribute / variable to plot.

```{r}
plot(mpsz["PLN_AREA_N"])
```

<br>

# **2. DATA PROCESSING**

## **2.1 Projection Transformation**

### 2.1.1 Inspect & Edit the EPSG Code

2 common issues encountered when importing geospatial data -

-   Shapefile with missing .proj file.

-   The projected CRS is wrongly assigned.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_crs( )*** - sf -]{style="color:#d46e15"} to retrieve coordinate reference system for mpsz.
:::

```{r}
st_crs(mpsz)
```

The EPSG code for "svy21" should be 3414, not 9001 as shown above.

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_set_crs( )*** - sf -]{style="color:#d46e15"} to replace the coordinate reference system for mpsz.
:::

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
```

### 2.1.2 Transform Geographic Coordinate System to Projected CRS

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_transform( )*** - sf -]{style="color:#d46e15"} to reproject x from one coordinate system wgs84 to svy21 mathematically, which is not capable by *st_set_crs( )*.
:::

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

<br>

## **2.2 Aspatial Data Frame Transformation**

::: {.callout-tip collapse="true" appearance="simple" icon="false"}
## [**⇳ Usage of the code chunk below :**]{style="color:#3a9c88"}

[***st_as_sf( )*** - sf -]{style="color:#d46e15"} to convert aspatial object, i.e., `listings` to an sf object.

-   *coords* - provide x-coordinates first before y-coordinates.

-   *crs* - define the coordinates reference system with 4326.

-   *%\>%* - to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected CRS..
:::

```{r}
listings_sf <- st_as_sf(listings,
                        coords = c("longitude", "latitude"),
                        crs = 4326) %>%
  st_transform(crs = 3414)
```

```{r}
glimpse(listings_sf, 70)
```

A new column, `geometry` is introduced while `longitude` & `latitude` are dropped from the data frame.

<br>
